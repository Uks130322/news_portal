# Команды для django shell. Заголовки и текст статей берутся из файла posts.json.

from News.models import *
# 1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
User.objects.create_user('Mary')
User.objects.create_user('John')

# 2. Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(user=User.objects.get(username='Mary'))
Author.objects.create(user=User.objects.get(username='John'))

# 3. Добавить 4 категории в модель Category.
Category.objects.create(name='Зоопарк')
Category.objects.create(name='Выставки')
Category.objects.create(name='Театры')
Category.objects.create(name='Москва')

# 4. Добавить 2 статьи и 1 новость.
with open("posts.json", encoding="utf8") as infile:
    posts = json.load(infile)
Post.objects.create(type=Post.article, title=posts['first_article']['title'], content=posts['first_article']['content'], author=Author.objects.get(user__username='Mary'))
Post.objects.create(type=Post.news, title=posts['second_article']['title'], content=posts['second_article']['content'], author=Author.objects.get(user__username='Mary'))
Post.objects.create(type=Post.article, title=posts['third_article']['title'], content=posts['third_article']['content'], author=Author.objects.get(user__username='John'))

# 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
PostCategory.objects.create(post=Post.objects.get(title=posts['first_article']['title']), category=Category.objects.get(name='Зоопарк'))
PostCategory.objects.create(post=Post.objects.get(title=posts['second_article']['title']), category=Category.objects.get(name='Выставки'))
PostCategory.objects.create(post=Post.objects.get(title=posts['second_article']['title']), category=Category.objects.get(name='Москва'))
PostCategory.objects.create(post=Post.objects.get(title=posts['third_article']['title']), category=Category.objects.get(name='Выставки'))

# 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(content='Супер!', post=Post.objects.get(title=posts['first_article']['title']), user=User.objects.get(username='John'))
Comment.objects.create(content='Ого, как интересно!', post=Post.objects.get(title=posts['second_article']['title']), user=User.objects.get(username='John'))
Comment.objects.create(content='А где это?', post=Post.objects.get(title=posts['second_article']['title']), user=User.objects.get(username='John'))
Comment.objects.create(content='Моё любимое место в Москве <З', post=Post.objects.get(title=posts['third_article']['title']), user=User.objects.get(username='Mary'))

# 7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(title=posts['first_article']['title']).like()
Post.objects.get(title=posts['first_article']['title']).like()
Post.objects.get(title=posts['first_article']['title']).like()
Post.objects.get(title=posts['first_article']['title']).like()
Post.objects.get(title=posts['second_article']['title']).dislike()
Post.objects.get(title=posts['third_article']['title']).like()

Comment.objects.get(content='Супер!').like()
Comment.objects.get(content='Ого, как интересно!').like()
Comment.objects.get(content='А где это?').dislike()
Comment.objects.get(content='Моё любимое место в Москве <З').like()
Comment.objects.get(content='Моё любимое место в Москве <З').like()

# 8. Обновить рейтинги пользователей. (Должно получиться 4 для Мэри и 3 для Джона)
Author.objects.get(user__username="Mary").update_rating()
Author.objects.get(user__username="John").update_rating()

# 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Author.objects.order_by('-rating').first().user.username

# 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best_post = Post.objects.order_by('-rating').first()
print(f'date: {best_post.add_date.date()}, username: {best_post.author.user.username}, rating: {best_post.rating}, title: {best_post.title}, preview: {best_post.preview()}')

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Comment.objects.filter(post=best_post).values('add_date', 'user__username', 'rating', 'content')
